replicaCount: 1

image:
  repository: 9mine/inferno-os
  pullPolicy: Always
  tag: "focal"

serviceAccount:
  create: false

securityContext: {}

externalPort: &externalPort 30098
internalPort: &internalPort 6678

service:
  - type: ClusterIP
    port: *internalPort

nodePortRange:
  from: *externalPort
  to: 30099
  proto: tcp

storage:
  size: 4Gi
#  class: yc-network-ssd
  mountPath: /usr/inferno-os/host/storage


ingress:
  enabled: false

resources: {}
autoscaling:
  enabled: false

env:
  - name: INTERNAL_PORT
    value: *internalPort
  - name: EXTERNAL_PORT
    value: *externalPort

files: 
  namespace_9mine_9front:
    path: /usr/inferno-os/host/storage/9mine/files/9front/9mine.ns
    data: |
      bind  /root /root
      mount -aC '#s/boot' /root
      bind  / /
      bind -a /root /
      mount -a '#s/boot' /
      bind -c #s /srv
      bind  '#c' /dev
      bind  '#d' /fd
      bind -c '#e' /env
      bind  '#p' /proc
      bind  '#σ' /shr
      bind -a '#¤' /dev
      bind -a '#¶' /dev
      bind  /mnt /mnt
      mount -b '#s/factotum' /mnt
      bind  /n /n
      mount -a '#s/slashn' /n
      mount -a '#s/slashmnt' /mnt
      bind  /mnt/exportfs /mnt/exportfs
      mount -a '#s/mntexport' /mnt/exportfs
      bind  /amd64/bin /bin
      bind -a /rc/bin /bin
      bind  /net /net
      bind -a '#l' /net
      bind -a '#I' /net
      mount -a '#s/cs' /net
      mount -a '#s/dns' /net

#      mount -a tcp!files.demo.metacoma.io!30098 /n/gridfiles
#      mount -a tcp!registry.demo.metacoma.io!30100 /mnt/registry
#      mount -a tcp!root.9gridchan.org!564 /n/gridfs/
#      cd /usr/$user
      
  newns_9front:
    path: /usr/inferno-os/host/storage/9mine/files/9front/newuser.rc
    data: |
      #!/bin/rc
      NAME=$1
      SESSION=cmdchan-$NAME
      
      CMDCHAN_ROOT = /n/cmdchan/
     
      
      cd /usr/glenda/mq
      ./mq -s $SESSION
      mount -c /srv/$SESSION /n/$SESSION
      
      rm -rf $CMDCHAN_ROOT
      ramfs -m $CMDCHAN_ROOT
      mkdir -p $CMDCHAN_ROOT/chan

      CMDCHAN_IN = $CMDCHAN_ROOT/chan/cmd

      mkdir -p /n/$SESSION/rc
      touch /n/$SESSION/rc/fd0 $CMDCHAN_IN
      
      rc -i < /n/$SESSION/rc/fd0 &
      
      bind /n/$SESSION/rc/fd0 $CMDCHAN_IN
      
      MIN_PORT=40000
      MAX_PORT=50000
      
      PORT=`{netstat -n | awk -v 'MIN_PORT='$MIN_PORT -v 'MAX_PORT='$MAX_PORT '/Listen/ && ($5 >= MIN_PORT && $5 <= MAX_PORT) { print $5 }' | sort -rn | awk -v 'MIN_PORT='$MIN_PORT 'BEGIN { port = MIN_PORT} { port = $0 + 1; exit } END { print port }'}
      
      rm /srv/registry.demo.metacoma.io!30100 /srv/tcp!root.9gridchan.org!564
      9fs tcp!registry.demo.metacoma.io!30100 /mnt/registry
      9fs tcp!root.9gridchan.org!564 /n/gridfs/
      myip=9front.demo.metacoma.io
      /n/gridfs/amd64/bin/gridlisten1 -d $NAME -tv 'tcp!*!'$PORT exportfs -r / &
    
  profile:  
    path: /usr/inferno-os/lib/sh/profile
    data: |
      load file2chan
      load std
      ndb/cs
      for host_var in `{ os env } { '{'$host_var'}' }
  
      os mkdir -p /usr/inferno-os/host/storage
      os chmod -R a+rwx /usr/inferno-os/host
      test -d /storage || mkdir /storage

      bind -ac '#U/host/storage' /storage
      chmod a+rwx /storage

      for d in welcomefs registry/logo files {  
        d = '/storage/9mine/'^$d
        test -d $d || mkdir -p $d 
        chmod a+rwx $d
      }



      test -d /mnt/registry || mkdir -p /mnt/registry
      mount -A tcp!registry.demo.metacoma.io!30100 /mnt/registry

      port = $INTERNAL_PORT
      external_port = $EXTERNAL_PORT
      echo 'Internal registry port '^$port
      echo 'External registry port '^$external_port

      echo 'files.demo.metacoma.io' > /dev/sysname
      grid/reglisten -A -r type files 'tcp!*!'^$external_port { export /storage & }

  registry:
    path: /usr/inferno-os/host/storage/9mine/welcomefs/registry.lua
    data: |     
        RegistryTool.on_use = function(itemstack, player)
            local player_name = player:get_player_name()
            local registry = common.read_registry_index(os.getenv("REGISTRY_ADDR") ~= "" and os.getenv("REGISTRY_ADDR") or
                                                            core_conf:get("REGISTRY_ADDR"), player_name)
            local parsed_registry = common.parse_registry_index(registry)
            local filtered_registries = {}
            local filtered_services = {}
            local registries_string = ""
            local services_string = ""
            for index, entry in pairs(parsed_registry) do
                if entry.type == "registry" then
                    registries_string = registries_string == "" and entry.service_addr or registries_string .. "," ..
                                            entry.service_addr
                    table.insert(filtered_registries, entry)
                else
                    services_string = services_string == "" and entry.service_addr or services_string .. "," ..
                                          entry.service_addr
                    table.insert(filtered_services, entry)
                end
            end
            minetest.show_formspec(player_name, "core:global_registry",
                table.concat({"formspec_version[4]", "size[29,11.5,false]",
                              "hypertext[0,0.1;30,1;;<bigger><center>Welcome to 9mine<center><bigger>]",
                              "field[0,0;0,0;parsed_registry;;", minetest.formspec_escape(minetest.serialize(parsed_registry)),
                              "]", "field[0,0;0,0;raw_registries;;",
                              minetest.formspec_escape(minetest.serialize(filtered_registries)), "]",
                              "field[0,0;0,0;raw_services;;", minetest.formspec_escape(minetest.serialize(filtered_services)),
                              "]", "field[0,0;0,0;filtered_registries;;",
                              minetest.formspec_escape(minetest.serialize(filtered_registries)), "]",
                              "field[0,0;0,0;filtered_services;;",
                              minetest.formspec_escape(minetest.serialize(filtered_services)), "]",
                              "field[0,0;0,0;registries_string;;", registries_string, "]", "field[0,0;0,0;services_string;;",
                              services_string, "]", "tablecolumns[text]",
                              "style[search_registries,search_services;textcolor=black]",
                              "hypertext[0.5, 0.8; 9, 1;;<big><center>Registries<center><big>]",
                              "field[0.5, 1.5; 6.5, 1;search_registries;;]", "field_close_on_enter[search_registries;false]",
                              "button[7, 1.5; 2.5, 1;button_search_registries;search]", "table[0.5, 2.7; 9, 8.3;registries;",
                              registries_string, ";]", "hypertext[10, 0.8; 9, 1;;<big><center>Services<center><big>]",
                              "field[10, 1.5; 6.5, 1;search_services;;]", "field_close_on_enter[search_services;false]",
                              "button[16.5, 1.5; 2.5, 1;button_search_services;search]", "table[10, 2.7; 9, 8.3;services;",
                              services_string, ";]", "image[19.5, 1; 9, 4;core_logo.png]",
                              "textarea[19.5, 5.5; 9, 5.5;;;Welcome to 9mine Proof of Concept. This project aims to visualize 9p fileservers and interact with them in minecraft-style]"},
                    ""))
        end
        local global_registry = function(player, formname, fields)
            if formname == "core:global_registry" then
                local player_name = player:get_player_name()
                if fields.quit == "true" then
                    return
                end
                local selected_entry = fields.selected_entry
                if fields.connect then
                    minetest.show_formspec(player:get_player_name(), "core:global_registry", "")
                    automount:spawn_root_platform(fields.selected_entry, player, nil, false)
                    return
                end
                local parsed_registry = fields.parsed_registry
                local raw_registries = fields.raw_registries
                local raw_services = fields.raw_services
                local filtered_registries = fields.filtered_registries
                local filtered_services = fields.filtered_services
                local registries_string = fields.registries_string
                local services_string = fields.services_string
                local registries_idx = ""
                local services_idx = ""
                local icon, description
                if fields.button_search_registries or fields.key_enter_field == "search_registries" then
                    filtered_registries, registries_string = common.filter_registry_by_keyword(
                                                                minetest.deserialize(raw_registries), fields.search_registries)
                    filtered_registries = minetest.serialize(filtered_registries)
                    selected_entry = nil
                end
                if fields.button_search_services or fields.key_enter_field == "search_services" then
                    filtered_services, services_string = common.filter_registry_by_keyword(minetest.deserialize(raw_services),
                                                            fields.search_services)
                    filtered_services = minetest.serialize(filtered_services)
                    selected_entry = nil
                end
                -- handle click in registry table 
                local event = core.explode_table_event(fields["registries"])
                if event.row ~= 0 then
                    local filtered_registries = minetest.deserialize(filtered_registries)
                    registries_idx = event.row
                    local service = filtered_registries[event.row]
                    selected_entry = service.service_addr
                    local registry = common.read_registry_index(service.service_addr, player_name)
                    registry = common.parse_registry_index(registry)
                    local obj, str = common.filter_registry_by_keyword(registry, "")
                    raw_services = minetest.serialize(obj)
                    filtered_services = raw_services
                    services_string = str
                    if service.icon then
                        icon = common.icon_from_url(service)
                    else
                        icon = common.icon_from_9p(service)
                        if not icon then
                            icon = "core_ns.png"
                        end
                    end
                    description = service.description or dump(service)
                end
                -- handle click in service table 
                local event = core.explode_table_event(fields["services"])
                if event.row ~= 0 then
                    local filtered_services = minetest.deserialize(filtered_services)
                    services_idx = event.row
                    local service = filtered_services[event.row]
                    selected_entry = service.service_addr
                    if service.icon then
                        icon = common.icon_from_url(service)
                    else
                        icon = common.icon_from_9p(service, player_name)
                        if not icon then
                            icon = "core_ns.png"
                        end
                    end
                    description = service.description or dump(service)
                end
                minetest.show_formspec(player_name, "core:global_registry",
                    table.concat({"formspec_version[4]", "size[29,11.5,false]",
                                  "hypertext[0,0.1;30,1;;<bigger><center>Welcome to 9mine<center><bigger>]",
                                  "field[0,0;0,0;parsed_registry;;", minetest.formspec_escape(parsed_registry), "]",
                                  "field[0,0;0,0;raw_registries;;", minetest.formspec_escape(raw_registries), "]",
                                  "field[0,0;0,0;raw_services;;", minetest.formspec_escape(raw_services), "]",
                                  "field[0,0;0,0;filtered_registries;;", minetest.formspec_escape(filtered_registries), "]",
                                  "field[0,0;0,0;filtered_services;;", minetest.formspec_escape(filtered_services), "]",
                                  selected_entry and "field[0,0;0,0;selected_entry;;" ..
                        minetest.formspec_escape(selected_entry) .. "]" or "", "field[0,0;0,0;registries_string;;",
                                  registries_string, "]", "field[0,0;0,0;services_string;;", services_string, "]",
                                  "tablecolumns[text]", "style[search_registries,search_services;textcolor=black]",
                                  "hypertext[0.5, 0.8; 9, 1;;<big><center>Registries<center><big>]",
                                  "field[0.5, 1.5; 6.5, 1;search_registries;;]",
                                  "field_close_on_enter[search_registries;false]",
                                  "button[7, 1.5; 2.5, 1;button_search_registries;search]",
                                  "table[0.5, 2.7; 9, 8.3;registries;", registries_string, ";", registries_idx, "]",
                                  "hypertext[10, 0.8; 9, 1;;<big><center>Services<center><big>]",
                                  "field[10, 1.5; 6.5, 1;search_services;;]", "field_close_on_enter[search_services;false]",
                                  "button[16.5, 1.5; 2.5, 1;button_search_services;search]", "table[10, 2.7; 9, 8.3;services;",
                                  services_string, ";]", "image[19.5, 1; 9, 4;", icon or "core_logo.png", "]",
                                  "textarea[19.5, 5.5; 9, 4.5;;;", minetest.formspec_escape(description) or
                        "Welcome to 9mine Proof of Concept. This project aims to visualize 9p fileservers and interact with them in minecraft-style",
                                  "]", selected_entry and "button[26, 10.3; 2.5, 0.7;connect;connect]" or ""}, ""))
            end
        end
        register.add_form_handler("core:global_registry", global_registry)